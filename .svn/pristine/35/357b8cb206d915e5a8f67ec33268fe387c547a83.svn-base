package com.gionee.ssp.service.push.req.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.gionee.ssp.service.push.req.PushConvertReqService;
import com.wk.model.adx.WKSSP.AdSlot;
import com.wk.model.adx.WKSSP.Banner;
import com.wk.model.adx.WKSSP.CreativeType;
import com.wk.model.adx.WKSSP.Device;
import com.wk.model.adx.WKSSP.Native;
import com.wk.model.adx.WKSSP.WKSSPRequest;
import com.wk.model.adx.nativevo.request.NativeRequestVO;
import com.wk.model.adx.nativevo.request.ReqAssetsVO;
import com.wk.model.adx.nativevo.request.ReqImgVO;
import com.wk.model.adx.nativevo.request.ReqTitleVO;
import com.wk.ssp.mvc.ipush.es.vo.CreativeMessageVO;
import com.wk.ssp.mvc.ipush.es.vo.QueryVO;
import com.wk.ssp.mvc.ipush.utils.AreaUtils;
import com.wk.ssp.utils.JsonUtils;

/**直投广告请求转换
 * @author dingyw
 *
 * 2017年9月7日
 */
@Service
public class PushConvertReqServiceImpl implements PushConvertReqService{
	
	/**
     * 将竞价请求按要求把对应字段放到{@code ES}的查询字段中
     * 
     * @param bidRequest 竞价请求
     * @return 返回{@link QuseryVO}实例
     * @throws Exception
     */
    public QueryVO convertReq(WKSSPRequest wKSSPRequest) throws Exception {
        QueryVO queryVO = new QueryVO();

        AdSlot adSlot = wKSSPRequest.getAdSlot();
        int is_splash_screen = adSlot.getIsSplashScreen();
        int instl = adSlot.getInstl();
        int creativeType = 0;
        List<Integer> itemTypes = new ArrayList<Integer>();
        List<CreativeMessageVO> creativeMessageVOs = new ArrayList<CreativeMessageVO>();

        if (is_splash_screen == 1 && adSlot.hasBanner()) { // 开屏
            Banner banner = adSlot.getBanner();
            CreativeMessageVO creativeMessageVO = new CreativeMessageVO();
            creativeMessageVO.setW(banner.getW()); // 创意宽
            creativeMessageVO.setH(banner.getH()); // 创意高
            creativeMessageVO.setItem_types(Arrays.asList(4));
            creativeMessageVOs.add(creativeMessageVO);
            creativeType = 3;
        } else if (is_splash_screen == 0 && instl == 1 && adSlot.hasBanner()) { // 插屏
            Banner banner = adSlot.getBanner();
            CreativeMessageVO creativeMessageVO = new CreativeMessageVO();
            creativeMessageVO.setW(banner.getW()); // 创意宽
            creativeMessageVO.setH(banner.getH()); // 创意高
            creativeMessageVO.setItem_types(Arrays.asList(4));
            creativeMessageVOs.add(creativeMessageVO);
            creativeType = 2;
        } else if (adSlot.hasBanner()) { // 横幅
            Banner banner = adSlot.getBanner();
            CreativeMessageVO creativeMessageVO = new CreativeMessageVO();
            creativeMessageVO.setW(banner.getW()); // 创意宽
            creativeMessageVO.setH(banner.getH()); // 创意高
            for (CreativeType cType : banner.getCTypeList()) {
                if (CreativeType.TEXT_ICON.equals(cType)) { // 图文
                    itemTypes.add(5);
                } else { // 图片
                    itemTypes.add(4);
                }

            }
            creativeMessageVO.setItem_types(itemTypes);
            creativeMessageVOs.add(creativeMessageVO);
            creativeType = 1;
        } else if (!ObjectUtils.isEmpty(adSlot.hasNative())) { // 原生广告
            Native nativ = adSlot.getNative();
            if (!StringUtils.isEmpty(nativ.getRequest())) {
                NativeRequestVO nativeRequestVO = JsonUtils.readJson2Object(nativ.getRequest(), NativeRequestVO.class);
                List<ReqAssetsVO> reqAssetsVOList = nativeRequestVO.getReqAssets();

                if (reqAssetsVOList.size() > 0) {
                    for (ReqAssetsVO reqAssetsVO : reqAssetsVOList) {
                        CreativeMessageVO creativeMessageVO = new CreativeMessageVO();

                        creativeMessageVO.setItem_types(Arrays.asList(reqAssetsVO.getType())); // 原生广告的类型
                        ReqTitleVO reqTitleVO = reqAssetsVO.getReqTitle();
                        ReqImgVO reqimgVO = reqAssetsVO.getReqImg();

                        if (!ObjectUtils.isEmpty(reqTitleVO)) {
                            creativeMessageVO.setLen(reqTitleVO.getLen()); // 主标题最大长度
                            creativeMessageVO.setSub_len(reqTitleVO.getSub_len()); // 副标题最大长度

                        }

                        if (!ObjectUtils.isEmpty(reqimgVO)) {
                            creativeMessageVO.setW(reqimgVO.getW()); // 创意宽
                            creativeMessageVO.setH(reqimgVO.getH()); // 创意高
                        }

                        creativeMessageVOs.add(creativeMessageVO);
                    }
                }
            }
            creativeType = 4;
        }
        queryVO.setCreativeMessageVO(creativeMessageVOs); // 创意信息
        queryVO.setAd_type(creativeType); // 创意类型
        queryVO.setAdslot(Integer.valueOf(adSlot.getId())); // 广告位id

        Device device = wKSSPRequest.getDevice();
        queryVO.setArea(AreaUtils.getAreaCodeByIP(device.getIpv4())); // 地域编码
        int connectionType = 0;
        if (device.getConnectType().getNumber() == 0) { // 全部
            connectionType = 0;
        } else if (device.getConnectType().getNumber() == 2) { // wifi
            connectionType = 2;
        } else { // 2G/3G/4G
            connectionType = 1;
        }
        queryVO.setConnectionType(connectionType); // 连接类型
        queryVO.setCarrier(device.getCarrier().getNumber()); // 运营商
        queryVO.setOs(device.getOsType().toLowerCase()); // 操作系统类型
        queryVO.setOsv(device.getOsVersion()); // 操作系统版本
        queryVO.setModel(this.getModelByMakeAndModel(device.getVendor(), device.getModel())); // 机型
        queryVO.setBitc(adSlot.getBitcList()); // 屏蔽动作类型
        queryVO.setCount(adSlot.getCount()); // 广告条数

        // 设置宏替换需要的字段
        queryVO.setIp(device.getIpv4()); // 设置ip
        queryVO.setImeiMd5(device.getImeiMd5()); // 设置imei
        queryVO.setBidRequestId(wKSSPRequest.getRequestId()); // 设置竞价请求的id
        queryVO.setDpidMd5(device.getAndroidIdMd5()); // 设置android的md5值

        return queryVO;
    }
    

    /**
     * 通过制造厂商和机型进行数据匹配，筛选出正确的机型
     * 
     * @param make 制造厂商
     * @param model 机型
     * @return 返回正确的机型
     */
    private String getModelByMakeAndModel(String make, String model) {
        if (!StringUtils.isBlank(make) && !StringUtils.isBlank(model)) {
            return make.toUpperCase() + "_" + model.toLowerCase();
        } else if (!StringUtils.isBlank(make)) {
            return make.toUpperCase() + "_" + model;
        } else if (!StringUtils.isBlank(model)) {
            return make + "_" + model.toLowerCase();
        }
        return make + "_" + model;
    }

}
