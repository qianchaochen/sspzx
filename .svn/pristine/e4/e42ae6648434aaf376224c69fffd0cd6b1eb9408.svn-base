package com.gionee.ssp.service.ipush.es.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.apache.commons.lang3.RandomUtils;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;

import com.gionee.ssp.service.ipush.es.PushResultService;
import com.wk.ssp.mvc.ipush.es.vo.CampaignVO;
import com.wk.ssp.mvc.ipush.es.vo.CreativeVO;
import com.wk.ssp.mvc.ipush.es.vo.QueryVO;


/**结果集服务实现类
 * @author dingyw
 *
 * 2017年10月16日
 */
@Service
public class PushResultServiceImpl implements PushResultService {

    @Override
    public List<CampaignVO> getList(final List<CampaignVO> campaignVOList, final QueryVO queryVO) {
        List<CampaignVO> campaignVOs = null;

        if (ObjectUtils.isEmpty(campaignVOList)) {
            return campaignVOs;
        }

        campaignVOs = this.randomCampaignVO(campaignVOList, queryVO.getCount());

        // 活动列表的大小
        int campaignSize = campaignVOs.size();
        for (int i = 0; i < campaignSize; i++) {
            CampaignVO campaignVO = campaignVOs.get(i);
            CreativeVO creativeVO = this.randomCreativeVO(campaignVO, queryVO);
            campaignVO.setCreatives(new CreativeVO[] { creativeVO });
        }
        return campaignVOs;
    }


    /**获取随机
     * @param campaignVO
     * @param queryVO
     * @return
     */
    private CreativeVO randomCreativeVO(final CampaignVO campaignVO, final QueryVO queryVO) {
        CreativeVO[] creativeVOs = campaignVO.getCreatives();
        if(creativeVOs.length == 0){
        	return null;
        }
        // 随机选取一个符合规格的广告进行显示
        int num = RandomUtils.nextInt(0, creativeVOs.length);
        return creativeVOs[num];
    }

    /**
     * 从多个活动中随机抽取一个活动
     * 
     * @param campaignVOList 活动列表列表
     * @param count 广告条数
     * @return 返回一个创意
     */
    private List<CampaignVO> randomCampaignVO(List<CampaignVO> campaignVOList, int count) {

        List<CampaignVO> campaignVOs = new ArrayList<CampaignVO>();
        List<CampaignVO> copyCampaignVOList = new ArrayList<CampaignVO>(campaignVOList);
        //CPT > CPM > CPC, 根据直投模式优先级去拿直投广告
        //打乱顺序, 获得初始的随机性
        Collections.shuffle(copyCampaignVOList);
        
        //根据mode进行排序, 分别将所有活动以cpt,cpm,cpc的顺序进行排序
        Collections.sort(copyCampaignVOList, modeComparator);
        
        for (int i = 0; i < count; i++) {
            if (ObjectUtils.isEmpty(copyCampaignVOList)) {
                break;
            }
            CampaignVO campaignVO = copyCampaignVOList.get(i);
            campaignVOs.add(campaignVO);
            copyCampaignVOList.remove(campaignVO);
        }

        return campaignVOs;
    }
    
    
    /**
	 * ecpm竞价比较器
	 */
	private final Comparator<CampaignVO> modeComparator = new Comparator<CampaignVO>() {
		@Override
		public int compare(CampaignVO one, CampaignVO two) {
			if (one.getMode() - two.getMode() > 0) {
				return 1;
			} else if (one.getMode() - two.getMode() < 0) {
				return -1;
			} else {
				return 0;
			}
		}
	};
}
