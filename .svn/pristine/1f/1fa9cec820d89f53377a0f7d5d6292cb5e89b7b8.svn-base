package com.gionee.ssp.service.wk.impl;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.ObjectUtils;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.gionee.ssp.service.cp.CheckCpService;
import com.gionee.ssp.service.wk.SdkInfoService;
import com.wk.ssp.utils.log.LogInfo;
import com.wk.ssp.utils.log.WKLogManager;
import com.wk.ssp.vo.sdk.SDKInfoVO;
import com.wk.ssp.vo.sdk.SdkRequestVO;

/**
 * @author dingyw
 *
 *         2017年4月19日
 */
@Service
public class SdkInfoServiceImpl implements SdkInfoService {
	
	
	/**
	 * 校验cp服务层 
	 */
	@Autowired
	CheckCpService checkCpService;

	// 填充sdk数据信息
	public void setSDKInfo(SdkRequestVO sdkRequestVO) {

		ServletRequestAttributes respAttributes = (ServletRequestAttributes) RequestContextHolder
				.getRequestAttributes();

		HttpServletRequest reqs = respAttributes.getRequest();
		String svr = reqs.getParameter("svr");
		String device = reqs.getParameter("device");
		String cuid = reqs.getParameter("cuid");
		String clientId = reqs.getParameter("client_id");
		String deviceId = reqs.getParameter("device_id");
		String apilevel = reqs.getParameter("apilevel");
		String isNewUser = reqs.getParameter("is_new_user");
		int is_new_user = 0;
		if (StringUtils.isNotEmpty(isNewUser)) {
			is_new_user = Integer.valueOf(reqs.getParameter("is_new_user"));
		}

		if (needRealIp(sdkRequestVO)) { // SDK请求客户端
			LogInfo logInfo = WKLogManager.getLOG();
			String realIp = logInfo.getIp(); // logInfo在之前已经获取了客户端的IP
			sdkRequestVO.getNetwork().setIp(realIp);

		} else { // 锁屏请求过来的
			LogInfo logInfo = WKLogManager.getLOG();
			logInfo.setIp(sdkRequestVO.getNetwork().getIp()); // 锁屏请求过来的，取报文体的IP作为客户端真实的IP
		}

		SDKInfoVO sdkInfoVO = new SDKInfoVO();
		sdkInfoVO.setSvr(svr);
		sdkInfoVO.setDevice(device);
		sdkInfoVO.setCuid(cuid);
		sdkInfoVO.setClient_id(clientId);
		sdkInfoVO.setDevice_id(deviceId);
		if (ObjectUtils.isEmpty(apilevel)) {
			sdkInfoVO.setApilevel("");
		} else {
			sdkInfoVO.setApilevel(apilevel);
		}
		sdkInfoVO.setIs_new_user(is_new_user);

		sdkRequestVO.setSdkInfoVO(sdkInfoVO);
	}

	private boolean needRealIp(SdkRequestVO sdkRequestVO) {
		if (checkCpService.isLockOld(sdkRequestVO.getApp().getApp_id(), sdkRequestVO.getAdslot().getAdslot_id())
				|| checkCpService.isMusic(sdkRequestVO.getApp().getApp_id(), sdkRequestVO.getAdslot().getAdslot_id())) {
			return false;
		}
		return true;
	}
}
